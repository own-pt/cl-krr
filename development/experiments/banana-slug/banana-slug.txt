#### WARNING
#### I'm keeping this file for future reference, but for the record,
     the SUMO.tptp generated by Sigma for this excercise is
     inconsistent (ie., fof(q,conjecture,$false). was valid.)

The following describes an experiment in attempting to compare the
TPTP generated by the SUO-KIF translator that we are working to
Sigma's TPTP output.

The idea is to implement the verification outlined in the following
paper:

Pease et al., “Large Theory Reasoning with SUMO at CASC.”
http://www.adampease.org/professional/CASC.pdf

The experiment is to process Merge.kif and Mid-Level-Ontology.kif from
SUMO and augment them with the following:

---

To give a flavor of the types of queries that might be answered using
SUMO axioms, an example is presented here, in its original SUO-KIF
syntax.  The question is “Is a banana slug an invertebrate?”.  The
problem has an example instance of a banana slug...

(instance BananaSlug10-1 Animal)

... a statement that animals without a spinal column are not
vertebrates...

(=>
  (and
    (instance ?A Animal)
    (not
      (exists (?PART)
        (and
          (instance ?PART SpinalColumn)
          (part ?PART ?A)))))
  (not
    (instance ?A Vertebrate)))

...statements that the banana slug does not have a spinal column but
does have some body parts...

(not
  (exists (?SPINE)
    (and
      (instance ?SPINE SpinalColumn)
      (part ?SPINE BananaSlug10-1))))

(and
  (instance BodyPart10-1 BodyPart)
  (component BodyPart10-1 BananaSlug10-1))

... and the conjecture ...

(instance BananaSlug10-1 Invertebrate)

---

To convert it to Sigma, first configure Sigma as described in 
https://github.com/own-pt/computational-semantics/blob/master/sumo-local-installation.text

Then configure config.xml to read Merge.kif, Mid-Level-Ontology.kif
and the fragment above (say, BananaSlug.kif).  Do not include the
conjecture.

You can generate TPTP in two different ways: (a) fire up Sigma and use
the web interface to convert it to TPTP; (b) execute the main class in
com/articulate/sigma/SUMOKBtoTPTPKB.java.

Then, add to the generated SUMO.tptp the following line containing the
conjecture:

fof(q1,conjecture,s_instance(s_BananaSlug10_1, s_Invertebrate)).

Now execute Vampire as follows:

~/Vampire---4.0/vampire --mode casc -t 5D -m 90000 SUMO.tptp

Explanation for the arguments:
http://vprover.org/cav2013.pdf

-t 5D, -m 90000: timeout of 5 days, max memory usage 90 Gb.

-- mode casc: When one runs VAMPIRE on a problem, the default strategy
              of VAMPIRE is used.  This strategy was carefully
              selected to solve a reasonably large number of problems
              based on the statistics collected by running VAMPIRE on
              problems from the TPTP library.  However, it is
              important to understand that there is no single best
              strategy, so for solving hard problems using a single
              strategy is not a good idea. [...] Fortunately, VAMPIRE
              users do not have to understand all the parameters. One
              can use a special VAMPIRE mode, called the CASC mode and
              used as --mode casc, which mimics the strategies used at
              the last CASC competition [32]. In this mode, VAMPIRE
              will treat the input problem with a cocktail of
              strategies running them sequentially with various time
              limits.

(note: it is not clear if -t and -m override the limits set up by CASC
mode).

Using this, we have obtained a Refutation (meaning the conjecture is
valid).  The output of Vampire was saved in the file
sigma-TPTP-banana-slug.txt

We repeated the same with our own code, as follows.  First, since we
don't support loading multiple files yet, we concatenated Merge.kif,
Mid-Level-Ontology.kif, and BananaSlug.kif into a single file
(sumo-banana-slug.kif).

Start Allegro Common Lisp Modern (mlisp).

(ql:quickload :suo-kif)
(in-package :suo-kif)
(compile-suo-kif :in-file "sumo-banana-slug.kif" :tptp t)

The generated output.tptp was augmented with the conjecture as
described above.  Vampire was run as described above, but it finished
without finding a Refutation, which implies that our translation is
not correct. 

An analysis of the refutation proof is done in the file
proof-analysis.txt
